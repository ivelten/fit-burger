@inherits ComponentBase

@using FitBurger.WebApp.Services
@using VxFormGenerator.Core
@using FitBurger.WebApp.Attributes
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using FitBurger.WebApp.Models.Abstractions

@typeparam TCreateModel where TCreateModel : new()

<EditForm EditContext="EditContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <RenderFormElements/>
    <ShouldDeliver Model="Model"/>
    <GenderInputSelect Model="Model"/>
    <UserNameAndPasswordInputTexts Model="Model"/>
    <CustomerInputSelect Model="Model"/>
    <DeliverymanInputSelect Model="Model"/>
    <Submit Caption="@SubmitCaption"/>
</EditForm>

@code {

    private EditContext? EditContext { get; set; }
    
    private ValidationMessageStore? ValidationMessageStore { get; set; }

    [Parameter]
    public string SubmitCaption { get; set; } = "Salvar";

    [Inject] 
    protected ICreateService<TCreateModel> CreateService { get; set; } = default!;

    [Inject] 
    protected NavigationManager NavigationManager { get; set; } = default!;

    [Parameter]
    public bool RedirectToList { get; set; } = true;

    private TCreateModel Model { get; set; } = default!;
    
    private static Type ModelType => typeof(TCreateModel);

    private static PluralityAttribute? Plurality =>
        ModelType.GetCustomAttribute<PluralityAttribute>();

    private static string TypeName =>
        ModelType.Name.StartsWith("Create")
            ? ModelType.Name[6..]
            : ModelType.Name;

    private static string PageName => TypeName.ToLowerInvariant();

    protected override void OnInitialized()
    {
        Model = new TCreateModel();
        EditContext = new EditContext(Model);
        ValidationMessageStore = new ValidationMessageStore(EditContext);

        EditContext.OnValidationRequested += OnValidationRequested;
    }

    private void OnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        ValidationMessageStore?.Clear();

        OnValidate.InvokeAsync((EditContext!, ValidationMessageStore!)).Wait();
    }

    [Parameter]
    public EventCallback<TCreateModel> OnClickSave { get; set; }
    
    [Parameter]
    public EventCallback<(EditContext, ValidationMessageStore)> OnValidate { get; set; }

    private async Task HandleValidSubmit()
    {
        await OnClickSave.InvokeAsync(Model);
        await CreateService.CreateAsync(Model);

        NavigationManager.NavigateTo(RedirectToList ? $"/{PageName}/list" : "/");
    }

}