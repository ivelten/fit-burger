@inherits ComponentBase

@using System.Reflection
@using FitBurger.Core.Domain.Enums
@using FitBurger.WebApp.Services
@using FitBurger.WebApp.Attributes
@using System.ComponentModel.DataAnnotations
@using FitBurger.Core.Domain.ValueObjects
@using FitBurger.WebApp.Models.Abstractions
@using VxFormGenerator.Core

@typeparam TListModel

@if (ListService is not null)
{
    <div class="form-group pb-3">
        <a href="/@PageName/create" class="btn btn-primary" role="button">
            Cadastrar @(Plurality?.Singular ?? TypeName)
        </a>
    </div>
}

@if (Model is null)
{
    <p>
        <em>Carregando...</em>
    </p>
}
else if (Model.Count == 0)
{
    if (ListService is not null)
    {
        <p>
            <em>Nenhum @(Plurality?.Singular ?? TypeName) cadastrado.</em>
        </p>
    }
}
else
{
    <div class="form-group">
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
            <tr>
                @foreach (var propertyName in PropertyNames)
                {
                    <th>@propertyName</th>
                }
                <th>Ações</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    @foreach (var propertyInfo in PropertyInfos)
                    {
                        var dataType = propertyInfo.GetCustomAttribute<DataTypeAttribute>();

                        <td>
                            @(propertyInfo.GetValue(item) switch
                            {
                                DateTime dateTime when dataType?.DataType == DataType.Date => dateTime.ToString("d"),
                                DateTime dateTime => dateTime.ToString("g"),
                                Gender gender => EnumExtensions.GetAttribute<DisplayAttribute>(gender)?.Name,
                                PaymentMethod paymentMethod => EnumExtensions.GetAttribute<DisplayAttribute>(paymentMethod)?.Name,
                                OrderStatus orderStatus => EnumExtensions.GetAttribute<DisplayAttribute>(orderStatus)?.Name,
                                decimal amount => amount.ToString("N2"),
                                bool value => value ? "Sim" : "Não",
                                var other => other?.ToString()
                            })
                        </td>
                    }
                    @if (item is IListModel listItem)
                    {
                        <td>
                            <a href='/@PageName/update/@listItem.Id' class="btn btn-outline-dark" role="button">
                                Editar
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <button @onclick="@(() => RemoveItem(item))" class="btn btn-outline-dark">Remover</button>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter]
    public ICollection<TListModel>? Model { get; set; }

    [Inject]
    protected IServiceProvider ServiceProvider { get; set; } = default!;
    
    private IListService<TListModel>? ListService { get; set; }
    
    private static Type ModelType => typeof(TListModel);

    private static PluralityAttribute? Plurality =>
        ModelType.GetCustomAttribute<PluralityAttribute>();

    private static IEnumerable<PropertyInfo> PropertyInfos => ModelType
        .GetProperties(BindingFlags.Instance | BindingFlags.Public)
        .Where(x => x.GetCustomAttribute<IgnoreAttribute>() is null);

    private static string TypeName =>
        ModelType.Name.StartsWith("List")
            ? ModelType.Name[4..]
            : ModelType.Name;

    private static string PageName => TypeName.ToLowerInvariant();

    private static IEnumerable<string> PropertyNames =>
        PropertyInfos.Select(x => x.GetCustomAttribute<DisplayAttribute>()?.Name ?? x.Name);

    protected override async Task OnInitializedAsync()
    {
        ListService = ServiceProvider.GetService<IListService<TListModel>>();
        
        if (ListService is not null)
            Model = await ListService.ListAsync();
    }

    private void RemoveItem(TListModel item)
    {
        Model?.Remove(item);
    }

}