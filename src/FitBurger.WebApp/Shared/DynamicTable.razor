@inherits ComponentBase

@using System.Reflection
@using FitBurger.Core.Domain.Enums
@using FitBurger.WebApp.Services
@using FitBurger.WebApp.Attributes
@using System.ComponentModel.DataAnnotations
@using FitBurger.WebApp.Models.Abstractions

@typeparam TListModel where TListModel : IListModel

<div class="form-group pb-3">
    <a href="/@PageName/create" class="btn btn-primary" role="button">
        Cadastrar @(Plurality?.Singular ?? TypeName)
    </a>
</div>

@if (Model is null)
{
    <p>
        <em>Carregando...</em>
    </p>
}
else if (Model.Length == 0)
{
    <p>
        <em>Nenhum atendente cadastrado.</em>
    </p>
}
else
{
    <div class="form-group">
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
            <tr>
                @foreach (var propertyName in PropertyNames)
                {
                    <th>@propertyName</th>
                }
                <th>Ações</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    @foreach (var propertyInfo in PropertyInfos)
                    {
                        var dataType = propertyInfo.GetCustomAttribute<DataTypeAttribute>();

                        <td>
                            @(propertyInfo.GetValue(item) switch
                            {
                                DateTime dateTime when dataType?.DataType == DataType.Date => dateTime.ToString("d"),
                                DateTime dateTime => dateTime.ToString("g"),
                                Gender gender => gender.GetAttribute<DisplayAttribute>()?.Name,
                                decimal amount => amount.ToString("N2"),
                                var other => other?.ToString()
                            })
                        </td>
                    }
                    <td>
                        <a href='/@PageName/update/@item.Id' class="btn btn-outline-dark" role="button">
                            Editar
                        </a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {

    private TListModel[]? Model { get; set; }

    [Inject]
    protected IListService<TListModel> ListService { get; set; } = default!;

    private static Type ModelType => typeof(TListModel);

    private static PluralityAttribute? Plurality =>
        ModelType.GetCustomAttribute<PluralityAttribute>();

    private static IEnumerable<PropertyInfo> PropertyInfos =>
        ModelType.GetProperties(BindingFlags.Instance | BindingFlags.Public);

    private static string TypeName =>
        ModelType.Name.StartsWith("List")
            ? ModelType.Name[4..]
            : ModelType.Name;

    private static string PageName => TypeName.ToLowerInvariant();

    private static IEnumerable<string> PropertyNames =>
        PropertyInfos.Select(x => x.GetCustomAttribute<DisplayAttribute>()?.Name ?? x.Name);

    protected override async Task OnInitializedAsync()
    {
        Model = await ListService.ListAsync();
    }

}