@page "/order/create"
@using FitBurger.WebApp.Models.Order
@using FitBurger.WebApp.Services
@using FitBurger.Core.Domain.Repositories.Abstractions

<PageTitle>Fazer pedido</PageTitle>

<h1>Fazer pedido</h1>

<AuthorizeView Roles="Administrador,Atendente,Cliente">
    <Authorized>
        <DynamicCreateForm TCreateModel="CreateOrder" OnClickAdd="SaveOrder" SubmitCaption="Finalizar pedido"/>
        <hr/>
        <h4>Itens de Pedido</h4>
        <DynamicSubItemForm TSubItemModel="CreateOrderItem" OnClickAdd="AddOrderItems"/>
        <hr/>
        <h4>Pagamento</h4>
        <DynamicSubItemForm TSubItemModel="CreateOrderPayment" OnClickAdd="AddPayments"/>
    </Authorized>
</AuthorizeView>

@code {

    [Inject]
    public OrderService OrderService { get; set; } = default!;

    [Inject]
    CustomAuthenticationStateProvider WebsiteAuthenticator { get; set; } = default!;

    [Inject]
    IUserRepository UserRepository { get; set; } = default!;

    private ICollection<CreateOrderItem> OrderItems { get; set; } = default!;

    private ICollection<CreateOrderPayment> Payments { get; set; } = default!;

    private int? CustomerId { get; set; }
    
    private int? AttendantId { get; set; }

    private Task AddOrderItems(ICollection<CreateOrderItem> orderItems)
    {
        OrderItems = orderItems;
        
        return Task.CompletedTask;
    }

    private Task AddPayments(ICollection<CreateOrderPayment> payments)
    {
        Payments = payments;

        return Task.CompletedTask;
    }

    private Task SaveOrder(CreateOrder order)
    {
        order.Items = OrderItems;
        order.Payments = Payments;
        order.CustomerId = CustomerId!.Value;

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        var authenticatedUser = await WebsiteAuthenticator.GetAuthenticatedUser();

        if (authenticatedUser is not null)
        {
            var user = await UserRepository.GetByUserNameAsync(authenticatedUser.UserName);

            if (user is not null)
            {
                switch (authenticatedUser.RoleName)
                {
                    case "Cliente":
                        CustomerId = user.Id;
                        break;
                    
                    case "Atendente":
                        AttendantId = user.Id;
                        break;
                }
            }
        }
    }
}